#! /usr/bin/env python

import sys
from actions import nav, look_at, manipulation, configuration, glance_to

def parse_docstring(doc):
	""" Parses the doc string, and return the doc without :param *:
	but with a list of params and their associated doc.
	"""
	doc = " ".join([(("[[#" + anchors[word] + "|" + word + "]]") if word in anchors else word) for word in doc.split()])
	r = doc.split(":param ")
	doc = r[0]
	params = [param.split(':') for param in r[1:]]

	return (doc, params)

actions = {}
anchors = {}

m = sys.modules[__name__]

for act_m in [getattr(m, fn) for fn in dir(m)]:
   for fn in [getattr(act_m, fn) for fn in dir(act_m) if hasattr(getattr(act_m, fn), "_action")]:
	actions.setdefault(act_m.__name__, []).append((fn.__name__, fn.__doc__))
	anchors[fn.__name__] = act_m.__name__ + "." + fn.__name__


print("= Documentation of Novela actions =")
print("\n<<TableOfContents(3)>>\n")

for m in actions.keys():
	print("<<Anchor(" + m + ")>>") # anchor
	print("== Category " + m.split('.')[1] + " ==")
	for name, doc in actions[m]:
		params = []
		print("<<Anchor(" + m + "." + name + ")>>") # anchor
		print("=== Action " + name + " ===")
		if doc: 
			doc, params = parse_docstring(doc)
			print(doc)
			if params:
				print("==== Parameters ====")
			for p, d in params:
				print(" * '''" + p + "''': " + d)
		print("\n")
		print("Example:\n{{{#!highlight python")
		print("from novela import *")
		print("from " + m + " import *\n")
		print("pr2 = getpr2()\n")
		if params:
			for p,d in params:
				print(p + " = " + p.upper() + " # define here a " + p )
			print("pr2.execute(" + name + ", " + ", ".join([p for p,d in params]) + ")")
		else:
			print("pr2.execute(" + name + ")")
		print("}}}")
		print("\n")

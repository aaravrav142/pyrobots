#! /usr/bin/env python

import sys

import roslib; roslib.load_manifest('pyrobots_actionlib')
import rospy
from sensor_msgs.msg import JointState
import pprint
import json

import robots
from robots.helpers import postures

places = {}
if len(sys.argv) == 2: # assume argument is posture file to load
    places = postures.read(sys.argv[1])
else:
    print("usage: jsonpose <posture file>")
    sys.exit(2)

pr2 = robots.PR2(init = False)

def getpose():
	try:
	    msg = rospy.client.wait_for_message('/joint_states', JointState, timeout = 10)
	except rospy.exceptions.ROSException:
	    print("Could not read topic /joint_states. Right ROS_MASTER_URI? "
		  "PR2 started?")
	    sys.exit(-1)

	raw = msg.position

	pose = {}
	#pose["HEAD"] = [round(raw[14],3), round(raw[15],3)] # head_pan_joint, head_tilt_joint
	#pose["TORSO"] = [round(raw[12], 3)] # torso_lift_joint

	# Arm joints order:
	# shoulder_pan_joint
	# shoulder_lift_joint
	# upper_arm_roll_joint 
	# elbow_flex_joint
	# forearm_roll_joint
	# wrist_flex_joint
	# wrist_roll_joint

	pose["RARM"] = [round(raw[18], 3), round(raw[19], 3), round(raw[17], 3), round(raw[21], 3), round(raw[20], 3), round(raw[22], 3), round(raw[23], 3), ]
	pose["LARM"] = [round(raw[32], 3), round(raw[33], 3), round(raw[31], 3), round(raw[35], 3), round(raw[34], 3), round(raw[36], 3), round(raw[37], 3), ]
	return pose

def getaction():
    action = raw_input("What do you want to do? v: view pose, g: go to pose, r:replace pose with current, s: save to file, q: quit\n")
    if action not in 'grsqv':
        return getaction()
    else:
       return action


#pprint.pprint(pose)

print("Welcome in SuperPoseMaster")
rarm_only = True if raw_input("Press 'r' if you only want to store poses for the right arm. Else, press enter.") == 'r' else False

while True:
    name = raw_input("Enter the name of the pose to edit (enter to edit last pose):")
    if not name or name == "":
        name = prevname
    if name not in places:
        pose = getpose()
        if rarm_only:
            pose = {'RARM':pose['RARM']}
        places[name] = pose

        print("Creating a new pose " + name)
    else:
        print("Modifying existing pose " + name)
    a = getaction()
    if a == 'g':
        pr2.setpose(places[name])
    if a == 'r':
        pose = getpose()
        if rarm_only:
            pose = {'RARM':pose['RARM']}
        places[name] = pose
    if a == 'v':
        pprint.pprint(places[name])
    if a == 'q':
        pr2.close()
        sys.exit()
    if a == 's':
        with open("tmp.json", 'w') as f:
            json.dump(places, f)
        print("Saved places as tmp.json")

    prevname = name

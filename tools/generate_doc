#! /usr/bin/env python

import sys
from actions import nav, primitive_nav, look_at, manipulation, configuration, games, administration

def parse_docstring(doc):
    """ Parses the doc string, and return the doc without :param *:
    but with a list of params and their associated doc.
    """
    doc = " ".join([(("[[#" + anchors[word] + "|" + word + "]]") if word in anchors else word) for word in doc.split(' ')])
    r = doc.split(":param ")
    doc = r[0]
    params = [param.split(':',1) for param in r[1:]]

    return (doc, params)

actions = {}
anchors = {}

m = sys.modules[__name__]

for act_m in [getattr(m, fn) for fn in dir(m)]:
    for fn in [getattr(act_m, fn) for fn in dir(act_m) if hasattr(getattr(act_m, fn), "_action")]:
        if act_m.__name__ != "__main__":
            actions.setdefault(act_m.__name__, []).append((fn.__name__, fn.__doc__))
            anchors[fn.__name__] = act_m.__name__ + "." + fn.__name__

print("= Documentation of pyRobots actions =")
print("\n<<TableOfContents(3)>>\n")

for m in actions.keys():
    print("<<Anchor(" + m + ")>>") # anchor
    print("== Category " + m.split('.')[1] + " ==")
    for name, doc in actions[m]:
        params = []
        print("<<Anchor(" + m + "." + name + ")>>") # anchor
        print("=== Action " + name + " ===")
        if doc: 
            doc, params = parse_docstring(doc)
            print(doc)
            if params:
                print("==== Parameters ====")
            for p, d in params:
                print(" * '''" + p + "''': " + d)
        print("\n")
        print("Example:\n{{{#!highlight python")
        print("import robots")
        print("pr2 = robots.PR2() # Pass 'dummy=True' to test without the real robot\n")
        if params:
            for p,d in params:
                print(p + " = " + p.upper() + " # define here a " + p )
            print("pr2." + name + "(" + ", ".join([p for p,d in params]) + ")")
        else:
            print("pr2." + name + "()")
        print("}}}")
        print("\n")
